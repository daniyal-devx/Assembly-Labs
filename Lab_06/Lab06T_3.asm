.MODEL SMALL
.STACK 100H
.DATA
MSG1 DB 'Enter a hex number (0-F, up to 4 digits): $'
ERRMSG DB 0DH,0AH,'Illegal hex digit, try again.$'
BIN_MSG DB 0DH,0AH,'In binary it is: $'
HEX1 DB ?
HEX2 DB ?
HEX3 DB ?
HEX4 DB ?

.CODE
MAIN PROC
    MOV AX,@DATA
    MOV DS,AX

START:
    MOV DX,OFFSET MSG1
    MOV AH,09
    INT 21H

    ; --- READ FIRST CHARACTER ---
    MOV AH,1
    INT 21H
    CMP AL,0DH
    JE CONVERT
    CALL CHECK_HEX
    MOV HEX1,AL

    ; --- READ SECOND CHARACTER ---
    MOV AH,1
    INT 21H
    CMP AL,0DH
    JE CONVERT
    CALL CHECK_HEX
    MOV HEX2,AL

    ; --- READ THIRD CHARACTER ---
    MOV AH,1
    INT 21H
    CMP AL,0DH
    JE CONVERT
    CALL CHECK_HEX
    MOV HEX3,AL

    ; --- READ FOURTH CHARACTER ---
    MOV AH,1
    INT 21H
    CMP AL,0DH
    JE CONVERT
    CALL CHECK_HEX
    MOV HEX4,AL

CONVERT:
    MOV DX,OFFSET BIN_MSG
    MOV AH,09
    INT 21H

    MOV AL,HEX1
    CALL PRINT_BIN
    MOV AL,HEX2
    CALL PRINT_BIN
    MOV AL,HEX3
    CALL PRINT_BIN
    MOV AL,HEX4
    CALL PRINT_BIN

    JMP EXIT

CHECK_HEX PROC
    CMP AL,'0'
    JB INVALID
    CMP AL,'9'
    JBE OK
    CMP AL,'A'
    JB INVALID
    CMP AL,'F'
    JBE OK
INVALID:
    MOV DX,OFFSET ERRMSG
    MOV AH,09
    INT 21H
    JMP START
OK:
    RET
CHECK_HEX ENDP
PRINT_BIN PROC
    CMP AL,0
    JE RETURNN
    CMP AL,'9'
    JBE DEC_NUM
    SUB AL,55
    JMP GOT_VAL
DEC_NUM:
    SUB AL,48
GOT_VAL:
    MOV CL,8
NEXTBIT:
    ROL AL,1
    JC PRINT1
    MOV DL,'0'
    JMP SHOW
PRINT1:
    MOV DL,'1'
SHOW:
    MOV AH,2
    INT 21H
    DEC CL
    JNZ NEXTBIT
RETURNN:
    RET
PRINT_BIN ENDP

EXIT:
    MOV AH,4CH
    INT 21H
MAIN ENDP
END MAIN
